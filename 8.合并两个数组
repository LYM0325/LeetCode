//双指针法
void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {
    int i = 0, j = 0;
    int sorted[m + n];
    int tmp;
    while (i < m || j < n) {
        if (i == m) {
            tmp = nums2[j++];
        } else if (j == n) {
            tmp = nums1[i++];
        } else if (nums1[i] < nums2[j]) {
            tmp = nums1[i++];
        } else {
            tmp = nums2[j++];
        }
        sorted[i + j - 1] = tmp;
    }
    for (int i = 0; i != m + n; ++i) {
        nums1[i] = sorted[i];
    }
}
/////////////////////////////////////////////////////////
//先合并后排序
int cmp(int* a, int* b) {
    return *a - *b;
}

void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {
    for (int i = 0; i < n; i++) {
        nums1[m + i] = nums2[i];
    }
    qsort(nums1, nums1Size, sizeof(int), cmp);
}
